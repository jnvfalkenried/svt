version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./docker_runtime/rabbitmq_data:/var/lib/rabbitmq
    labels:
      description: "RabbitMQ server"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"] # Check if RabbitMQ port are open
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s

  rabbitmq-bindings:
    build:
      context: ./src
      dockerfile: ./rabbitmq_bindings/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    # command: sh -c "sleep 10 && python bindings.py" #binding will have to wait for rabbitmq first
    environment:
      RABBITMQ_SERVER: rabbitmq  # RabbitMQ hostname within Docker network
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RMQ_TASKS_EXCHANGE: ${RMQ_TASKS_EXCHANGE}
      RABBITMQ_HASHTAG_QUEUE: ${RABBITMQ_HASHTAG_QUEUE}
      RABBITMQ_VIDEO_BYTES_QUEUE: ${RABBITMQ_VIDEO_BYTES_QUEUE}
      RABBITMQ_EMBEDDINGS_QUEUE: ${RABBITMQ_EMBEDDINGS_QUEUE}
      RMQ_PRODUCER_TASKS_QUEUE: ${RMQ_PRODUCER_TASKS_QUEUE}
    labels:
      description: "RabbitMQ Bindings"

  postgres:
    image: pgvector/pgvector:pg14
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./docker_runtime/postgres_data:/var/lib/postgresql/data
    labels:
      description: "PostgreSQL server"

  alembic:
    build:
      context: ./src
      dockerfile: ./postgresql/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src/postgresql:/app/postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
    labels:
      description: "Alembic migration service"

  tasks-manager:
    build:
      context: ./src
      dockerfile: ./tasks_manager/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      rabbitmq-bindings:
        condition: service_completed_successfully
      postgres: 
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    environment:
      RABBITMQ_SERVER: rabbitmq  # RabbitMQ hostname within Docker network
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RMQ_TASKS_EXCHANGE: ${RMQ_TASKS_EXCHANGE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./src/tasks_manager/main.py:/app/main.py
      - ./src/tasks_manager/manager.py:/app/manager.py
      - ./src/helpers:/app/helpers
      - ./src/postgresql:/app/postgresql
      - ./docker_runtime/logs:/app/logs
    labels:
      description: "Tasks Manager (Scheduler) for reccurent tasks"

  producer:
    build:
      context: ./src
      dockerfile: ./producer/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      rabbitmq-bindings:
        condition: service_completed_successfully
    environment:
      RABBITMQ_SERVER: rabbitmq  # RabbitMQ hostname within Docker network
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RMQ_PRODUCER_TASKS_QUEUE: ${RMQ_PRODUCER_TASKS_QUEUE}
    volumes:
      - ./src/producer/main.py:/app/main.py
      - ./src/producer/producer.py:/app/producer.py
      - ./src/helpers:/app/helpers
      - ./docker_runtime/logs:/app/logs
    labels:
      description: "TikTok Data Producer"

  consumer:
    build:
      context: ./src
      dockerfile: ./consumer/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      rabbitmq-bindings:
        condition: service_completed_successfully
      postgres: 
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    environment:
      RABBITMQ_SERVER: rabbitmq  # RabbitMQ hostname within Docker network
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_HASHTAG_QUEUE: ${RABBITMQ_HASHTAG_QUEUE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./src/consumer/main.py:/app/main.py
      - ./src/consumer/consumer.py:/app/producer.py
      - ./src/helpers:/app/helpers
      - ./src/postgresql:/app/postgresql
      - ./docker_runtime/logs:/app/logs
    labels:
      description: "Embeddings Consumer"

  # embeddings-consumer:
  #   build:
  #     context: ./src
  #     dockerfile: ./consumer_embeddings/Dockerfile
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     rabbitmq-bindings:
  #       condition: service_completed_successfully
  #     postgres: 
  #       condition: service_healthy
  #     alembic:
  #       condition: service_completed_successfully
  #   environment:
  #     RABBITMQ_SERVER: rabbitmq 
  #     RABBITMQ_PORT: ${RABBITMQ_PORT}
  #     RABBITMQ_USER: ${RABBITMQ_USER}
  #     RABBITMQ_PASS: ${RABBITMQ_PASS}
  #     #RABBITMQ_HOST: ${RABBITMQ_HOST}
  #     RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
  #     RABBITMQ_EMBEDDINGS_QUEUE: ${RABBITMQ_EMBEDDINGS_QUEUE}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: ${POSTGRES_PORT}
  #   #command: python -u /app/consumer_embeddings/consumer_embeddings.py
  #   labels:
  #     description: "TikTok Embeddings Consumer"
  
  video-processor:
    build:
      context: ./src
      dockerfile: ./video_processor/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      rabbitmq-bindings:
        condition: service_completed_successfully
    environment:
      RABBITMQ_SERVER: rabbitmq  # RabbitMQ hostname within Docker network
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      GOOGLE_APPLICATION_CREDENTIALS: /app/.ssh/google-credentials.json
    volumes:
      - ${HOME_DIR}/.ssh:/app/.ssh
    labels:
      description: "TikTok Multimodal Search Producer/Consumer"

  react-frontend:
    build:
      context: ./src
      dockerfile: ./react_frontend/Dockerfile
    ports:
      - "3000:3000"   # React development server
      - "4040:4040"   # ngrok web interface
    volumes:
      - ./src/react_frontend:/app  # Mount the entire React frontend directory
      - /app/node_modules  # Avoid mounting node_modules to prevent overwriting
    environment:
      CHOKIDAR_USEPOLLING: true  # Required for hot-reloading in Windows
      NGROK_AUTH_TOKEN: ${NGROK_AUTH_TOKEN}
    labels:
      description: "React App"

  db-api:
    build:
      context: ./src
      dockerfile: ./db_api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "80:80"
    labels:
      description: "Database API"
