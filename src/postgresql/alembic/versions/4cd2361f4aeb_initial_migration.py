"""Initial migration

Revision ID: 4cd2361f4aeb
Revises: 
Create Date: 2024-10-19 14:48:28.637742

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4cd2361f4aeb"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authors",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("nickname", sa.String(), nullable=True),
        sa.Column("signature", sa.String(), nullable=True),
        sa.Column("unique_id", sa.String(), nullable=True),
        sa.Column("verified", sa.Boolean(), nullable=True),
        sa.Column("digg_count", sa.Integer(), nullable=True),
        sa.Column("follower_count", sa.Integer(), nullable=True),
        sa.Column("following_count", sa.Integer(), nullable=True),
        sa.Column("heart_count", sa.Integer(), nullable=True),
        sa.Column("video_count", sa.Integer(), nullable=True),
        sa.Column(
            "inserted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index("authors_id", "authors", ["id"], unique=False)
    op.create_index("authors_unique_id", "authors", ["unique_id"], unique=False)
    op.create_index("follower_counts", "authors", ["follower_count"], unique=False)
    op.create_table(
        "challenges",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("video_count", sa.Integer(), nullable=True),
        sa.Column("view_count", sa.Integer(), nullable=True),
        sa.Column(
            "inserted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index("challenges_id", "challenges", ["id"], unique=False)
    op.create_index("challenges_title", "challenges", ["title"], unique=False)
    op.create_table(
        "music",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("author_name", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("original", sa.Boolean(), nullable=True),
        sa.Column("duration", sa.Integer(), nullable=True),
        sa.Column(
            "inserted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index("music_author_name", "music", ["author_name"], unique=False)
    op.create_index("music_id", "music", ["id"], unique=False)
    op.create_table(
        "posts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.Integer(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("duet_enabled", sa.Boolean(), nullable=True),
        sa.Column("duet_from_id", sa.String(), nullable=True),
        sa.Column("is_ad", sa.Boolean(), nullable=True),
        sa.Column("can_repost", sa.Boolean(), nullable=True),
        sa.Column("collect_count", sa.String(), nullable=True),
        sa.Column("comment_count", sa.String(), nullable=True),
        sa.Column("digg_count", sa.String(), nullable=True),
        sa.Column("play_count", sa.String(), nullable=True),
        sa.Column("repost_count", sa.String(), nullable=True),
        sa.Column("share_count", sa.String(), nullable=True),
        sa.Column("author_id", sa.String(), nullable=True),
        sa.Column("music_id", sa.String(), nullable=True),
        sa.Column(
            "inserted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["authors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["music_id"],
            ["music.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index("posts_created_at", "posts", ["created_at"], unique=False)
    op.create_index("posts_id", "posts", ["id"], unique=False)
    op.create_table(
        "posts_challenges",
        sa.Column("post_id", sa.String(), nullable=False),
        sa.Column("challenge_id", sa.String(), nullable=False),
        sa.Column(
            "inserted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["challenge_id"],
            ["challenges.id"],
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.PrimaryKeyConstraint("post_id", "challenge_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("posts_challenges")
    op.drop_index("posts_id", table_name="posts")
    op.drop_index("posts_created_at", table_name="posts")
    op.drop_table("posts")
    op.drop_index("music_id", table_name="music")
    op.drop_index("music_author_name", table_name="music")
    op.drop_table("music")
    op.drop_index("challenges_title", table_name="challenges")
    op.drop_index("challenges_id", table_name="challenges")
    op.drop_table("challenges")
    op.drop_index("follower_counts", table_name="authors")
    op.drop_index("authors_unique_id", table_name="authors")
    op.drop_index("authors_id", table_name="authors")
    op.drop_table("authors")
    # ### end Alembic commands ###
